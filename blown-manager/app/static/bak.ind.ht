<!doctype html>
<html>
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Cosmic-Infra Manager Pro</title>
<style>
  :root { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; }
  body { margin: 0; background: #0b1020; color: #e7eaf6; }
  header { padding: 12px 16px; border-bottom: 1px solid #1f2a44; display:flex; gap:8px; align-items:center; flex-wrap:wrap; }
  button { padding: 8px 12px; border: 1px solid #33406a; background:#121a33; color:#e7eaf6; border-radius:8px; cursor:pointer; font-size:13px; }
  button:hover { background:#172247; }
  button.danger { border-color:#a03040; }
  button.danger:hover { background:#401020; }
  .wrap { display:flex; min-height: calc(100vh - 80px); }
  .library { width: 280px; border-right:1px solid #1f2a44; padding: 12px; }
  .grid { flex:1; display:grid; gap:12px; padding:12px; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); }
  .card { background:#121a33; border:1px solid #1f2a44; border-radius:12px; overflow:hidden; display:flex; flex-direction:column; }
  .card h3 { margin:0; padding:10px 12px; border-bottom:1px solid #1f2a44; font-size: 14px; letter-spacing:.3px; display:flex; justify-content:space-between; align-items:center; }
  .card .content { padding:8px 10px; min-height:120px; }
  ul { list-style:none; padding:0; margin:0; }
  li { padding:6px 8px; border:1px dashed #2a3a69; border-radius:8px; margin-bottom:8px; display:flex; justify-content:space-between; align-items:center; font-size:13px; }
  .dropzone { border:2px dashed #2a3a69; border-radius:10px; padding:16px; text-align:center; color:#9fb0e8; margin:8px 0; }
  .dropzone.dragover { background:#0d1531; border-color:#4a5a89; }
  .file { cursor:grab; flex:1; }
  .muted { color:#9fb0e8; font-size:12px; }
  .row { display:flex; gap:8px; align-items:center; }
  a.x { color:#ff98a6; text-decoration:none; padding:0 6px; cursor:pointer; }
  .health { display:inline-block; width:8px; height:8px; border-radius:50%; margin-right:4px; }
  .health.healthy { background:#40c057; }
  .health.unhealthy { background:#e03131; }
  .health.unknown { background:#868e96; }
  .meta { font-size:11px; color:#7a8ab8; }
  .symlink { color:#4a9eff; }
  #msg { padding:4px 8px; border-radius:6px; }
  #msg.success { background:#1a4028; color:#40c057; }
  #msg.error { background:#401020; color:#ff6b6b; }
  .events { position:fixed; bottom:10px; right:10px; width:300px; max-height:200px; overflow-y:auto; background:#0d1531; border:1px solid #1f2a44; border-radius:8px; padding:8px; font-size:11px; }
  .event { padding:4px; border-bottom:1px solid #1f2a44; }
  .mode-toggle { display:flex; gap:4px; background:#0d1531; padding:2px; border-radius:6px; }
  .mode-toggle button { padding:4px 8px; font-size:12px; }
  .mode-toggle button.active { background:#2a3a69; }
</style>
</head>
<body>
  <header>
    <strong>Cosmic-Infra Manager Pro</strong>
    <button id="refreshAll">üîÑ Refresh</button>
    <button id="undoBtn">‚Ü©Ô∏è Undo</button>
    <button id="healthBtn">‚ù§Ô∏è Health</button>
    <button id="snapshotBtn">üì∏ Snapshot</button>
    <button id="stopAll" class="danger">üõë Stop All</button>
    <div class="mode-toggle">
      <button id="modeCopy" class="active">Copy</button>
      <button id="modeSymlink">Symlink</button>
    </div>
    <span id="msg"></span>
  </header>
  <div class="wrap">
    <aside class="library">
      <h3>üìö Library</h3>
      <ul id="library"></ul>
    </aside>
    <main class="grid" id="projects"></main>
  </div>
  <div class="events" id="events" style="display:none;">
    <strong>Recent Events</strong>
    <div id="eventList"></div>
  </div>
<script>
let currentMode = 'copy';

const msg = (text, type='info') => { 
  const m = document.getElementById('msg'); 
  m.textContent = text; 
  m.className = type;
  setTimeout(() => { m.textContent = ''; m.className = ''; }, 3000);
};

async function jget(u){ 
  const r = await fetch(u); 
  if(!r.ok) throw new Error(await r.text()); 
  return r.json(); 
}

async function jpost(u, b){ 
  const r = await fetch(u, {
    method:'POST', 
    headers:{'Content-Type':'application/json'}, 
    body: JSON.stringify(b||{})
  }); 
  if(!r.ok) throw new Error(await r.text()); 
  return r.json(); 
}

async function jdel(u){ 
  const r = await fetch(u, {method:'DELETE'}); 
  if(!r.ok) throw new Error(await r.text()); 
  return r.json(); 
}

function fileItem(name, size, checksum, isSymlink, delCb){
  const li = document.createElement('li');
  const sizeKb = (size/1024).toFixed(1);
  const typeIndicator = isSymlink ? '<span class="symlink">üîó</span>' : 'üìÑ';
  li.innerHTML = `
    <span class="file" draggable="true">
      ${typeIndicator} ${name}
      <span class="meta"> ${sizeKb}KB ‚Ä¢ ${checksum}</span>
    </span>
    <a class="x" title="Remove with graceful stop">‚úï</a>
  `;
  li.querySelector('.x').onclick = (e) => { 
    e.preventDefault(); 
    if(confirm(`Remove ${name}? This will gracefully stop the process first.`)) {
      delCb(name); 
    }
  };
  li.querySelector('.file').addEventListener('dragstart', (e) => {
    e.dataTransfer.setData('text/plain', name);
  });
  return li;
}

async function loadLibrary(){
  try {
    const data = await jget('/api/library');
    const ul = document.getElementById('library');
    ul.innerHTML = '';
    data.files.forEach(f => {
      const li = document.createElement('li');
      li.className = 'file'; 
      li.draggable = true; 
      const sizeKb = (f.size/1024).toFixed(1);
      li.innerHTML = `
        üìÑ ${f.name}
        <span class="meta">${sizeKb}KB</span>
      `;
      li.addEventListener('dragstart', (e) => {
        e.dataTransfer.setData('text/plain', f.name);
      });
      ul.appendChild(li);
    });
  } catch(e) {
    msg('Failed to load library: ' + e.message, 'error');
  }
}

function dropZoneEl(project){
  const dz = document.createElement('div');
  dz.className = 'dropzone'; 
  dz.innerHTML = `Drop .py files here<br><span class="muted">Mode: ${currentMode}</span>`;
  
  dz.addEventListener('dragover', (e) => { 
    e.preventDefault(); 
    dz.classList.add('dragover'); 
  });
  
  dz.addEventListener('dragleave', () => dz.classList.remove('dragover'));
  
  dz.addEventListener('drop', async (e) => {
    e.preventDefault(); 
    dz.classList.remove('dragover');
    const filename = e.dataTransfer.getData('text/plain');
    try {
      await jpost('/api/assign', {
        project, 
        filename,
        mode: currentMode
      });
      msg(`‚úÖ Assigned ${filename} ‚Üí ${project} (${currentMode})`, 'success');
      await renderProjects();
    } catch(err) { 
      msg('‚ùå ' + (err.message || 'Assign failed'), 'error'); 
    }
  });
  return dz;
}

async function renderProjects(){
  const grid = document.getElementById('projects');
  const data = await jget('/api/projects');
  grid.innerHTML = '';
  
  for (const proj of data.projects){
    const card = document.createElement('section'); 
    card.className = 'card';
    
    // Header with health indicator
    const head = document.createElement('h3');
    const healthClass = proj.health?.healthy ? 'healthy' : 
                       proj.health?.status === 'no_heartbeat' ? 'unknown' : 'unhealthy';
    const healthTitle = proj.health?.message || 'Unknown status';
    
    head.innerHTML = `
      <span>
        <span class="health ${healthClass}" title="${healthTitle}"></span>
        ${proj.name} 
        <span class="muted">(${proj.file_count} files)</span>
      </span>
    `;
    
    // Controls
    const controls = document.createElement('div'); 
    controls.className = 'row';
    const btnClear = document.createElement('button'); 
    btnClear.textContent = 'Clear';
    btnClear.onclick = async () => { 
      if(confirm(`Clear all scripts from ${proj.name}? Files will be backed up.`)) {
        try { 
          const res = await jpost(`/api/project/${proj.name}/clear`); 
          msg(`‚úÖ Cleared ${proj.name} - ${res.removed} files backed up`, 'success'); 
          await renderProjects(); 
        } catch(e) { 
          msg('‚ùå ' + e.message, 'error'); 
        } 
      }
    };
    controls.appendChild(btnClear);
    head.appendChild(controls);

    // Content
    const content = document.createElement('div'); 
    content.className = 'content';
    content.appendChild(dropZoneEl(proj.name));

    // Files list
    const ul = document.createElement('ul');
    try {
      const files = await jget(`/api/project/${proj.name}/files`);
      files.files.forEach(f => {
        const li = fileItem(
          f.name, 
          f.size, 
          f.checksum,
          f.is_symlink,
          async(fn) => { 
            try { 
              const res = await jdel(`/api/project/${proj.name}/file/${encodeURIComponent(fn)}`); 
              msg(`‚úÖ Removed ${fn} after graceful stop`, 'success'); 
              await renderProjects(); 
            } catch(e) { 
              msg('‚ùå ' + e.message, 'error'); 
            } 
          }
        );
        ul.appendChild(li);
      });
    } catch(e) {
      const em = document.createElement('div'); 
      em.className = 'muted'; 
      em.textContent = e.message || 'Error loading files'; 
      content.appendChild(em);
    }

    content.appendChild(ul);
    card.appendChild(head); 
    card.appendChild(content);
    grid.appendChild(card);
  }
}

async function loadEvents() {
  try {
    const data = await jget('/api/events?limit=10');
    const list = document.getElementById('eventList');
    list.innerHTML = '';
    data.events.forEach(e => {
      const div = document.createElement('div');
      div.className = 'event';
      const time = new Date(e.timestamp).toLocaleTimeString();
      div.innerHTML = `<strong>${time}</strong> ${e.action}`;
      list.appendChild(div);
    });
  } catch(e) {
    console.error('Failed to load events:', e);
  }
}

async function showHealth() {
  try {
    const health = await jget('/api/health');
    const unhealthy = health.summary.unhealthy_projects;
    if (unhealthy.length > 0) {
      alert(`‚ö†Ô∏è Unhealthy projects: ${unhealthy.join(', ')}\n\nCheck heartbeat files.`);
    } else {
      alert(`‚úÖ All ${health.summary.total_projects} projects are healthy!`);
    }
  } catch(e) {
    msg('Failed to get health status: ' + e.message, 'error');
  }
}

// Mode toggle
document.getElementById('modeCopy').onclick = () => {
  currentMode = 'copy';
  document.getElementById('modeCopy').classList.add('active');
  document.getElementById('modeSymlink').classList.remove('active');
  msg('Mode: Copy', 'success');
};

document.getElementById('modeSymlink').onclick = () => {
  currentMode = 'symlink';
  document.getElementById('modeSymlink').classList.add('active');
  document.getElementById('modeCopy').classList.remove('active');
  msg('Mode: Symlink', 'success');
};

// Global buttons
document.getElementById('refreshAll').onclick = () => { 
  loadLibrary(); 
  renderProjects(); 
  loadEvents();
  msg('üîÑ Refreshed', 'success');
};

document.getElementById('stopAll').onclick = async () => { 
  if(confirm('‚ö†Ô∏è Stop ALL scripts in ALL projects?\n\nThis will:\n1. Create kill markers for graceful shutdown\n2. Backup all files\n3. Remove scripts from projects\n\nYou can undo this action.')) {
    try { 
      const res = await jpost('/api/stop_all'); 
      msg(`‚úÖ Stopped all - ${res.removed} files backed up (snapshot: ${res.snapshot})`, 'success'); 
      await renderProjects(); 
    } catch(e) { 
      msg('‚ùå ' + e.message, 'error'); 
    } 
  }
};

document.getElementById('undoBtn').onclick = async () => {
  try {
    const res = await jpost('/api/undo');
    msg(`‚Ü©Ô∏è ${res.message}`, 'success');
    await renderProjects();
  } catch(e) {
    msg('‚ùå ' + e.message, 'error');
  }
};

document.getElementById('healthBtn').onclick = showHealth;

document.getElementById('snapshotBtn').onclick = async () => {
  const name = prompt('Snapshot name (optional):');
  try {
    const res = await jpost('/api/snapshots/create', { name });
    msg(`üì∏ Snapshot created: ${res.name}`, 'success');
  } catch(e) {
    msg('‚ùå ' + e.message, 'error');
  }
};

// Toggle events panel with 'e' key
document.addEventListener('keydown', (e) => {
  if (e.key === 'e' && !e.target.matches('input, textarea')) {
    const events = document.getElementById('events');
    events.style.display = events.style.display === 'none' ? 'block' : 'none';
    if (events.style.display === 'block') loadEvents();
  }
});

// Initial load
loadLibrary().then(renderProjects).then(loadEvents);

// Auto-refresh health every 30 seconds
setInterval(renderProjects, 30000);
</script>
</body>
</html>